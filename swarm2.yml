---
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- hosts: manager[0]
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

# determine the status of each worker node and break them
# into two groups:
#   - swarm_worker_operational (host is joined to the swarm cluster)
#   - swarm_worker_bootstrap (host needs to be joined to the cluster)
- hosts: worker
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

# when the swarm_manager_operational group is empty, meaning there
# are no hosts running swarm, we need to initialize one of the hosts
# then add it to the swarm_manager_operational group
- hosts: manager[0]
  become: true
  tasks:
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ groups['manager_ip'][0] }}:2377

# retrieve the swarm tokens and populate a list of ips listening on
# the swarm port 2377      
- hosts: manager[0]
  become: true
  vars:
    iface: "{{ groups['manager_ip'][0] | default('eth0') }}"
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

# join the worker hosts not yet initialized to the swarm cluster
- hosts: worker
  become: true
  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{groups['manager_ip'][0]}}:2377
        --token={{ swarm_worker_token.stdout }}
        {{ groups['manager_ip'][0] }}:2377

- hosts: manager[0]
  become: true
  tasks:
    - name: Deploy service
      shell: docker stack deploy --compose-file /home/ubuntu/api/beer/docker-compose.yml api       